const express = require('express'); const router = express.Router(); const db = require('../db'); router.post('/', async (req, res) => { const { period_id } = req.body; if (!period_id) { return res.status(400).send('period_id is required'); } const connection = await db.getConnection(); try { await connection.beginTransaction(); const [period] = await connection.query('SELECT * FROM payroll_periods WHERE id = ? AND is_open = 1', [period_id]); if (period.length === 0) { throw new Error('Payroll period not found or is not open.'); } const [employees] = await connection.query('SELECT userid, pay_rate, pay_type FROM employees'); const [newRun] = await connection.query('INSERT INTO payroll_runs (period_id, status) VALUES (?, ?)', [period_id, 'calculated']); const run_id = newRun.insertId; for (const employee of employees) { const [attendance] = await connection.query('SELECT SUM(workhour) as total_work, SUM(overtime_hours) as total_ot FROM attendance WHERE userid = ? AND date BETWEEN ? AND ?', [ employee.userid, period[0].date_start, period[0].date_end ]); const work_hours = attendance[0].total_work || 0; const ot_hours = attendance[0].total_ot || 0; const gross_income = (employee.pay_rate * work_hours) + (employee.pay_rate * 1.5 * ot_hours); const net_income = gross_income; // Simplified for now await connection.query('INSERT INTO payroll_run_items (run_id, userid, gross_income, total_deductions, net_income) VALUES (?, ?, ?, ?, ?)', [ run_id, employee.userid, gross_income, 0, net_income ]); } await connection.commit(); res.status(201).json({ message: 'Payroll run created successfully', run_id }); } catch (error) { await connection.rollback(); console.error(error); res.status(500).json({ message: 'Failed to create payroll run', error: error.message }); } finally { connection.release(); } }); module.exports = router;
